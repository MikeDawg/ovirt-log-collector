#!/bin/bash
#
# This helper script is part of produceReport.sh

function check_hosts_health() {
    # Hosts health validation
    hosts_health_check=$(execute_SQL_from_file "${SQLS}"/hosts_query_check_health.sql)
    if [ ${#hosts_health_check} -gt 0 ]; then
        echo "List of hosts for health check:"
        echo "${hosts_health_check}" | createAsciidocTableWhenProducingAsciidoc "noheader"
    else
        echo "- PASSED: Hosts health check"
    fi
}

function check_vms_health() {
    # Virtual Machines health validation
    vms_health_check=$(execute_SQL_from_file "${SQLS}"/vms_query_health.sql)
    if [ ${#vms_health_check} -gt 0 ]; then
        echo
        echo "List of vms for health check:"
        echo "${vms_health_check}" | createAsciidocTableWhenProducingAsciidoc "noheader"
    else
        echo "- PASSED: Virtual machines health check"
    fi
}

function check_cluster_no_dc() {
    # Clusters without datacenter validation
    cluster_no_dc=$(execute_SQL_from_file "${SQLS}"/cluster_query_check_datacenter.sql)
    if [ ${#cluster_no_dc} -gt 0 ]; then
        echo
        echo "The following cluster(s) have no datacenter assigned:"
        echo "${cluster_no_dc}" | createAsciidocTableWhenProducingAsciidoc "noheader"
    else
        echo "- PASSED: clusters contain datacenter assigned"
    fi
}

function check_third_party_certificate() {
    # Third party certificate validation
    pki_file_path=$(find "${SOS_REPORT_UNPACK_DIR}" -name ${ENGINE_PKI_FILE})
    if [[ $? != 0 ]]; then
        echo "Could not find ${ENGINE_PKI_FILE} in the sosreport, exiting"
        exit $?
    fi
    dir_pki_conf=$(dirname "${pki_file_path}")

    # Read the variables from conf files in /etc/ovirt-engine/engine.conf.d
    for file in ${dir_pki_conf}/*.conf
    do
        [ -f "$file" ] && source $file
    done

    if [ ! -z "${ENGINE_PKI_TRUST_STORE}" ] && [ "${ENGINE_PKI_TRUST_STORE}" != ${DEFAULT_PKI_TRUSTSTORE} ]; then
        echo
        echo "- PKI Trust Store:"
        echo "CAUTION: ENGINE_PKI_TRUST_STORE has non-default value"
        echo "ENGINE_PKI_TRUST_STORE defaults to ${DEFAULT_PKI_TRUSTSTORE}"
        echo "ENGINE_PKI_TRUST_STORE is currently ${ENGINE_PKI_TRUST_STORE}"
        echo
        echo "To change this value, use the files in ${ENGINE_PKI_CONF_DIR}"
        echo
        echo "For more information about this topic, see also:"
        echo "https://bugzilla.redhat.com/1336838"
    else
        echo "- PASSED: ENGINE_PKI_TRUST_STORE has default value"
    fi
}

function check_vms_running_obsolete_cluster() {
    # In oVirt Engine 4.0, the minimum cluster level supported is 3.6.
    # So we must inform in case there is vm in 3.5 cluster level
    vms_out_date=$(execute_SQL_from_file "${SQLS}"/vms_query_check_obsolete_cluster.sql)
    if [ ${#vms_out_date} -gt 0 ]; then
        echo
        echo "The following virtual machine(s) have cluster level (<= 3.5), cluster level must be upgraded to 3.6:"
        echo "See some considerations before upgrade to 3.6:"
        echo "https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Virtualization/3.6/html/Upgrade_Guide/Red_Hat_Enterprise_Virtualization_3.6_Upgrade_Considerations.html"
        echo "${vms_out_date}" | createAsciidocTableWhenProducingAsciidoc "noheader"
    else
        echo "- PASSED: All virtual machines have cluster level >= 3.6"
    fi
}

function check_vms_with_no_timezone_set() {
    sql_cmd=$(cat "${SQLS}"/vms_check_no_timezone_set.sql)
    vms_no_timezone_set=$(executeSQL "${sql_cmd}")
    if [ ${#vms_no_timezone_set} -gt 0 ]; then
        echo
        echo "The following virtual machine(s) have no timezone set and might affect cluster upgrade,"
        echo "related bugzilla report:"
        echo "https://bugzilla.redhat.com/show_bug.cgi?id=1386507"
        printTable "${sql_cmd}"
        echo
    else
        echo "- PASSED: Timezone is set for all virtual machines"
    fi
}
